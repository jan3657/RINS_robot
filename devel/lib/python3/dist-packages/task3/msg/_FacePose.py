# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from task3/FacePose.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class FacePose(genpy.Message):
  _md5sum = "fba59784293eab073312c8d62c229f5c"
  _type = "task3/FacePose"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string name
geometry_msgs/PoseStamped position
uint64 x1
uint64 y1
uint64 x2
uint64 y2

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['name','position','x1','y1','x2','y2']
  _slot_types = ['string','geometry_msgs/PoseStamped','uint64','uint64','uint64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       name,position,x1,y1,x2,y2

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FacePose, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.name is None:
        self.name = ''
      if self.position is None:
        self.position = geometry_msgs.msg.PoseStamped()
      if self.x1 is None:
        self.x1 = 0
      if self.y1 is None:
        self.y1 = 0
      if self.x2 is None:
        self.x2 = 0
      if self.y2 is None:
        self.y2 = 0
    else:
      self.name = ''
      self.position = geometry_msgs.msg.PoseStamped()
      self.x1 = 0
      self.y1 = 0
      self.x2 = 0
      self.y2 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.position.header.seq, _x.position.header.stamp.secs, _x.position.header.stamp.nsecs))
      _x = self.position.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d4Q().pack(_x.position.pose.position.x, _x.position.pose.position.y, _x.position.pose.position.z, _x.position.pose.orientation.x, _x.position.pose.orientation.y, _x.position.pose.orientation.z, _x.position.pose.orientation.w, _x.x1, _x.y1, _x.x2, _x.y2))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.position is None:
        self.position = geometry_msgs.msg.PoseStamped()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.position.header.seq, _x.position.header.stamp.secs, _x.position.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.position.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.position.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 88
      (_x.position.pose.position.x, _x.position.pose.position.y, _x.position.pose.position.z, _x.position.pose.orientation.x, _x.position.pose.orientation.y, _x.position.pose.orientation.z, _x.position.pose.orientation.w, _x.x1, _x.y1, _x.x2, _x.y2,) = _get_struct_7d4Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.position.header.seq, _x.position.header.stamp.secs, _x.position.header.stamp.nsecs))
      _x = self.position.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d4Q().pack(_x.position.pose.position.x, _x.position.pose.position.y, _x.position.pose.position.z, _x.position.pose.orientation.x, _x.position.pose.orientation.y, _x.position.pose.orientation.z, _x.position.pose.orientation.w, _x.x1, _x.y1, _x.x2, _x.y2))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.position is None:
        self.position = geometry_msgs.msg.PoseStamped()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.position.header.seq, _x.position.header.stamp.secs, _x.position.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.position.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.position.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 88
      (_x.position.pose.position.x, _x.position.pose.position.y, _x.position.pose.position.z, _x.position.pose.orientation.x, _x.position.pose.orientation.y, _x.position.pose.orientation.z, _x.position.pose.orientation.w, _x.x1, _x.y1, _x.x2, _x.y2,) = _get_struct_7d4Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_7d4Q = None
def _get_struct_7d4Q():
    global _struct_7d4Q
    if _struct_7d4Q is None:
        _struct_7d4Q = struct.Struct("<7d4Q")
    return _struct_7d4Q
